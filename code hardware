//aansturing pinnen & SPI

#include <iostream>
#include <wiringPi.h>
#include <wiringPiSPI.h>

#define SPI_SPEED 1000000
#define SPI_MODE_0 0
#define SPI_MODE_1 1
#define SPI_MODE_2 2
#define SPI_MODE_3 3

#define RESET 0
#define DAC 1
#define DigiPot1 2
#define DigiPot2 3
#define DigiPot3 4
#define ADC 5
#define LCD 6
#define TOUCHPAD 7
#define AANTAL_SPI_DEVICES 8

#define CHANNEL1 0b00000000		//0
#define CHANNEL2 0b00000001		//1
#define CHANNEL3 0b00000010		//2
#define CHANNEL4 0b00000011		//3
#define ALL_CHANNELS 0b00001111

#define R_SWITCH 8	//R-on switch 5-10 Ohm (nog te meten, volgens datasheet)

int t = 0;

typedef struct {
	int channel;
	int pin;		//pin-nummer op 40-pins connector
	int gpio;		//gpio pin-nummer
	int speed;		//CLk Speed in Hz
	int mode;		//MODE1-4
} spi_device_id;

static spi_device_id spi_devices [AANTAL_SPI_DEVICES] = {
	{RESET,		-1,		-1,		-1,			-1},
	{DAC,		7,		7,		1000000,	SPI_MODE_0},
	{DigiPot1,	35,		24,	 	1000000, 	SPI_MODE_0},
	{DigiPot2,	33,		23,	 	1000000, 	SPI_MODE_0},
	{DigiPot3,	31,		22,		1000000, 	SPI_MODE_0},
	{ADC,		29,		21,		1000000, 	SPI_MODE_0},
	{LCD,		0,		0,		1000000,	SPI_MODE_0},
	{TOUCHPAD,	0,		0,		1000000,	SPI_MODE_0}
};

typedef struct {
	int channel;	
	int pin;		//pin-nummer op 40-pins connector
	int gpio;		//gpio pin-nummer
} switch_id;

static switch_id switches[3] = {	//actief laag
	{CHANNEL1,	36,		27},
	{CHANNEL2,	37,		25},
	{CHANNEL3,	38,		28}
};

int DigiPot_value[3];



int set_spi (int device) {
	for (int i = 1; i < AANTAL_SPI_DEVICES; i++) {		//alle pinnen hoog zetten
		digitalWrite(spi_devices[i].gpio, HIGH);
	}
	if (device > 0) {									//actieve CS hoog zetten, tenzij RESET (=0)
	digitalWrite(spi_devices[device].gpio, LOW);
	}

	return 1;
}

int send_data(int device, unsigned char data[], int length) {
	set_spi(device);
	wiringPiSPIDataRW(0, data, length);
	set_spi(RESET);
	
	return 1;
}

int setup_hardware() {
	wiringPiSetup();
	
	if (t==0){
		wiringPiSPISetupMode(0, SPI_SPEED, SPI_MODE_0);
		t = 1;
	}
	
	for (int i = 1; i < AANTAL_SPI_DEVICES; i++) {		//CS pinnen instellen
		pinMode(spi_devices[i].gpio, OUTPUT);
		digitalWrite(spi_devices[i].gpio, HIGH);		//standaard hoog zetten, allemaal uit
	}
	
	// set up DAC en set to 0V
	unsigned char c1[3] = {0b01100000 | ALL_CHANNELS, 0b00000000, 0b00000000};	//select internal ref for al DAC's
	send_data(DAC, c1, 3);
	unsigned char c2[3] = {0b00110000 | ALL_CHANNELS, 0b00000000, 0b00000000};	//write 0 to and update all DAC registers
	send_data(DAC, c2, 3);

	// set up DigiPot en set to 10kOhm
	unsigned char c3 = 0b11111111;
	DigiPot_value[CHANNEL1] = c3;				//255 = 10kOhm
	send_data(DigiPot1, &c3, 1);
	unsigned char c4 = 0b11111111;
	DigiPot_value[CHANNEL2] = c4;				//255
	send_data(DigiPot2, &c4, 1);	
	unsigned char c5 = 0b11111111;
	DigiPot_value[CHANNEL3] = c5;				//255
	send_data(DigiPot3, &c5, 1);
	
	
	for (int i = 0; i < 3; i++) {						//controle pinnen voor switch instellen
		pinMode(switches[i].gpio, OUTPUT);
		digitalWrite(switches[i].gpio, HIGH);			//standaard hoog zetten, alle switches open (beveiliging)
	}
		
	return 1;
}


int set_dac_value(unsigned char channel, int value) {
	channel &= 0b00001111;								//beveiliging tegen verkeerde input
	channel |= 0b00110000;								//command + kanaal
	unsigned char data_msb = value>>4;					//12bit data opdelen in twee bytes
	unsigned char data_lsb = (value & 0b1111)<<4;
	unsigned char data[3] = {							//samenvoegen & in 1 maal versturen
		channel,
		data_msb,
		data_lsb
	};
	send_data(DAC, data, 3);
		
	return 1;
}

int set_dac_voltage(int channel, double voltage) {
	int value = voltage * 4096 / 2 / 5;
	set_dac_value(channel, value);
	
	return 1;
}

int get_adc_value(int channel) {
	channel &= 0b00000011;					//beveiliging tegen verkeerde input
	unsigned char c[2] = {					//data request opstellen
		0b00000100,
		0b00000000
	};					
	c[0] += (channel<<4);
	send_data(ADC, c, 2);					
	
	return c[0] *256 + c[1];
}

double get_adc_voltage(int channel) {
	double d = get_adc_value(channel);
	d = d * 10 / 4096;
	
	return d;
}

double get_current(int channel) {
	double current = get_adc_voltage(channel) / (8 + DigiPot_value[channel] * 39.0625);
	
	return current;
}

int set_digipot(int channel, unsigned char value) {
	channel &= 0b00000011;						//beveiliging tegen verkeerde input => fout er zijn maar drie kanalen
	DigiPot_value[channel] = value;
	send_data(DigiPot1 + channel, &value, 1);
	
	return value;
}

int set_switch(int channel, bool value) {
	if (channel == ALL_CHANNELS) {						//om alle kanalen in 1 keer open of gesloten te zetten
		for(int i = 0; i<3; i++) {
			set_switch(i,value);						//recursief alle drie de kanalen overlopen
		}
	}
	else {
		digitalWrite(switches[channel].gpio, value);	//kanaal per kanaal gaan bedienen
	}													
	
	return value;
}




int main(int argc, char **argv) {
	setup_hardware();
	delay(500);
	while(1){
		setup_hardware();
		delay(1);
		set_digipot(CHANNEL1, 50);
		set_digipot(CHANNEL2, 120);
		set_digipot(CHANNEL3, 170);
		set_dac_value(CHANNEL1, 1000);
		set_dac_value(CHANNEL2, 2000);
		set_dac_value(CHANNEL3, 3000);
		set_dac_value(CHANNEL4, 4000);
		get_adc_value(CHANNEL1);
		get_adc_value(CHANNEL2);
		get_adc_value(CHANNEL3);
		get_adc_value(CHANNEL4);
		delay(1);
	}
}
